{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { environment } from './../../../environments/environment';\nimport * as SearchActions from './search.actions';\nimport * as TodayPreviewActions from './../../today-preview/store/today-preview.actions';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nexport class SearchEffects {\n  constructor(actions$, http) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.findLocationDetailsOnSearch = this.actions$.pipe(ofType(SearchActions.SEARCH_LOCATION_DETAILS), switchMap(response => {\n      return this.http.get(environment.locationFreeSearchApi + response.payload).pipe(switchMap(responseData => {\n        let latt;\n        let long;\n        const lattLong = responseData[0].latt_long.split(', ');\n        [latt, long] = lattLong;\n        return [new TodayPreviewActions.UpdateLocation({\n          latitude: Number(latt),\n          longitude: Number(long),\n          title: responseData[0].title,\n          locationType: responseData[0].location_type,\n          woeid: responseData[0].woeid\n        }), new SearchActions.SaveResearch(responseData[0].title), new SearchActions.SearchModeOff()];\n      }), catchError(error => {\n        return of(new SearchActions.SearchError());\n      }));\n    }));\n  }\n  static {\n    this.ɵfac = function SearchEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SearchEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SearchEffects,\n      factory: SearchEffects.ɵfac\n    });\n  }\n}\n__decorate([Effect()], SearchEffects.prototype, \"findLocationDetailsOnSearch\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}